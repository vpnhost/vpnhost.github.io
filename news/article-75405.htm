<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
    	<!-- Required meta tags -->
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
	<link rel="canonical" href="https://vpnhost.github.io/news/article-75405.htm" />
	<link rel="icon" href="/assets/website/img/clashfree/favicon.ico" type="image/x-icon"/>
	<title>Dubbo源码学习系列整合网络框架Netty详解</title>
		<meta name="description" content="&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;上篇文章写到了利用zookeeper的特性实现缓存服务地址列表，接下来我们可以借助Netty的优点对程序进行改造，使其" />
	
    <meta name="author" content="VPN Host 节点机场订阅中文站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://vpnhost.github.io/news/article-75405.htm" />
    <meta property="og:site_name" content="VPN Host 节点机场订阅中文站" />
    <meta property="og:title" content="Dubbo源码学习系列整合网络框架Netty详解" />
    <meta property="og:image" content="https://vpnhost.github.io/uploads/20240303/91d732709c777c60f4d848bc785bce75.webp" />
        <meta property="og:release_date" content="2025-03-17T09:39:00" />
    <meta property="og:updated_time" content="2025-03-17T09:39:00" />
        <meta property="og:description" content="&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;上篇文章写到了利用zookeeper的特性实现缓存服务地址列表，接下来我们可以借助Netty的优点对程序进行改造，使其" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Dubbo源码学习系列整合网络框架Netty详解">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    
	<link rel="stylesheet" href="/assets/website/css/clashfree/style-starter.css">
	<link href="https://fonts.googleapis.com/css?family=Josefin+Slab:400,700,700i&display=swap" rel="stylesheet">
	<link href="https://fonts.googleapis.com/css?family=Poppins:400,700&display=swap" rel="stylesheet">
	<link href="https://fonts.googleapis.com/css?family=Open+Sans&display=swap" rel="stylesheet">
	<!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-B0ZES7ZP10"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-B0ZES7ZP10');
</script>
	<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body id="home" data-page="detail">
    <section class=" w3l-header-4 header-sticky">
    <header class="absolute-top">
        <div class="container">
            <nav class="navbar navbar-expand-lg navbar-light">
                                <a class="navbar-brand" href="/">
                        VPN Host                    </a>
                                <button class="navbar-toggler bg-gradient collapsed" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                    <span class="fa icon-expand fa-bars"></span>
                    <span class="fa icon-close fa-times"></span>
                </button>
                <div class="collapse navbar-collapse" id="navbarNav">
                    <ul class="navbar-nav mx-auto">
                                                <li class="nav-item">
                            <a class="nav-link" href="/">首页</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/free-nodes/">免费节点</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/news/">新闻资讯</a>
                        </li>
                                                <li class="nav-item">
                            <a class="nav-link" href="/client.htm">客户端</a>
                        </li>
                                            </ul>
                </div>
        </div>
        </nav>
        </div>
    </header>
</section>
<script src="/assets/website/js/frontend/clashfree/jquery-3.5.1.min.js"></script> <!-- Common jquery plugin -->
<!--bootstrap working-->
<script src="/assets/website/js/frontend/clashfree/bootstrap.min.js"></script>
<!-- //bootstrap working-->
<!-- disable body scroll which navbar is in active -->
<script>
$(function() {
    $('.navbar-toggler').click(function() {
        $('body').toggleClass('noscroll');
    })
});
</script>
    <!-- breadcrumbs -->
    <section class="w3l-inner-banner-main">
        <div class="about-inner about ">
            <div class="container">
                <div class="main-titles-head text-center">
                    <h1 class="header-name" style="word-break: break-all;">
                        Dubbo源码学习系列整合网络框架Netty详解                    </h1>
                    
                </div>
            </div>
        </div>
        <div class="breadcrumbs-sub">
            <div class="container">
                <ul class="breadcrumbs-custom-path">
                    <li class="right-side propClone"><a href="/" class="">首页 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="right-side propClone"><a href="/news/" class="">新闻资讯 <span class="fa fa-angle-right" aria-hidden="true"></span></a>
                        <p>
                    </li>
                    <li class="active ">正文</li>
                </ul>
            </div>
        </div>
        </div>
    </section>
    <!-- breadcrumbs //-->
    <section class="w3l-content-with-photo-4" id="about">
        <div class="content-with-photo4-block ">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="Clash Meta免费节点订阅站" data-url="https://clash-meta.github.io">
                  				  				  				<div id="content_views" class="htmledit_views"> </h1> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;上篇文章写到了利用zookeeper的特性实现缓存服务地址列表，接下来我们可以借助Netty的优点对程序进行改造，使其即支持Http容器的tomcat，又支持Dubbo协议的Netty, 实际上Dubbo也是支持两种协议，一种是Dubbo协议，一种是Http， 其中dubbo协议就是借助Netty实现的。</p> </h1> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;1)&nbsp; Netty客户端通过IP和端口绑定，准备好JSON数据包。</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2)&nbsp; Netty&nbsp; client 将要发送的数据包通过一系列的encoder, 将数据加密，然后发送给socket，由socket 发送给服务端。</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;3)&nbsp; Netty server 接收到Netty client 发送过来的数据后，然后通过一系列的解码器，将数据进行解码，解码完毕后，可以自定义serverHandler处理响应逻辑，最后将响应的数据通过一系列的编码器编码，然后发送到socket中，最终发生给客户端。</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;4)&nbsp; Netty client 收到服务端发过来的消息后，又先会通过一系列的解码器将消息解码，然后将解码后的消息转交给clientHandler处理，处理完后，再将消息加密，通过socket返回给服务端。</p> </h1> <p>&nbsp; &nbsp; &nbsp; &nbsp;在写NettyServer之前，我们需要先去学习Netty相关的网络基础知识，然后再去写Server。</p> <p>&nbsp; &nbsp; &nbsp; &nbsp;NettyServer的启动流程如下:</p> <blockquote> <p>&nbsp; &nbsp; &nbsp; &nbsp;1) 绑定ip,监听端口。</p> <p>&nbsp; &nbsp; &nbsp; &nbsp;2)&nbsp; 创建一个Nio事件组，该事件组是IO多路复用的体现。</p> <p>&nbsp; &nbsp; &nbsp; &nbsp;3)&nbsp; NioServerSocketChannel&nbsp; 注册selector事件处理器, 准备接收连接。</p> <p>&nbsp; &nbsp; &nbsp; &nbsp;4)&nbsp; 初始化Channel信道, 数据是通过Channel来传输的。</p> <p>&nbsp; &nbsp; &nbsp; &nbsp;5)&nbsp; 使用serverHandler 处理业务逻辑。</p> </blockquote> <pre><code class="language-java">package com.luban.protocol.dubbo;  import io.netty.bootstrap.ServerBootstrap; import io.netty.channel.ChannelInitializer; import io.netty.channel.ChannelPipeline; import io.netty.channel.nio.NioEventLoopGroup; import io.netty.channel.socket.SocketChannel; import io.netty.channel.socket.nio.NioServerSocketChannel; import io.netty.handler.codec.serialization.ClassResolvers; import io.netty.handler.codec.serialization.ObjectDecoder; import io.netty.handler.codec.serialization.ObjectEncoder;  public class NettyServer {      public void start(String hostName, int port) {         try {             final ServerBootstrap bootstrap = new ServerBootstrap();             NioEventLoopGroup eventLoopGroup = new NioEventLoopGroup();             bootstrap.group(eventLoopGroup)                     .channel(NioServerSocketChannel.class)                     .childHandler(new ChannelInitializer&lt;SocketChannel&gt;() {                         protected void initChannel(SocketChannel socketChannel) throws Exception {                             ChannelPipeline pipeline = socketChannel.pipeline();                             pipeline.addLast("decoder", new ObjectDecoder(ClassResolvers                                     .weakCachingConcurrentResolver(this.getClass()                                             .getClassLoader())));                             pipeline.addLast("encoder", new ObjectEncoder());                             pipeline.addLast("handler", new NettyServerHandler());                         }                     });             bootstrap.bind(hostName, port).sync();         } catch (InterruptedException e) {             e.printStackTrace();         }     }       public static void main(String[] args) {          NettyServer server = new NettyServer();         server.start("127.0.0.1", 8001);     }   }</code></pre> <p><span style="color:#f33b45;">&nbsp;注</span>:&nbsp;encoder和decoder的位置可以互换，但是都要写在handler前面，否则在调用的时候会出现有一端有TimeoutException</p> <p>启动NettyServer:</p> <p><img fetchpriority="high" decoding="async" alt="" height="446" src="http://img.555519.xyz/uploads3/20220602/a2d13bdf105d5e50e5ddf7454bac0c1f.jpg"></p> <p>启动成功后，接着写NettyClient！</p> </h1> <p>&nbsp; &nbsp; &nbsp; &nbsp; 1) NettyClient和NettyServer的连接方式是TCP, TCP连接的建立是比较耗时的一个操作，因此最好使用多线程技术的线程池去管理多连接，刚开始初始化的时候会要点时间，连接用完了会归还到线程池里，然后再次使用只需要从线程池去选择一个连接使用即可。</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; 2) 我们可以选择使用CachedThreadPool,<span style="color:#f33b45;">CachedThreadPool线程池是可以伸缩的，它会根据需要创建新的线程，然后再重用之前可使用的已创建的线程</span>。</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; 首先看一下一个关键的接口ChannelHandler，提供信道初始化的实现。</p> <h2>&nbsp; &nbsp; &nbsp;ChannelHandler</h2> <p>&nbsp; &nbsp; &nbsp; &nbsp; 它有2个关键的实现类<span style="color:#f33b45;">ChannelInboundHandlerAdapter</span>和<span style="color:#f33b45;">ChannelOutBoundHandlerAdapter</span>，他们都可以向Pipeline大管道里读写数据, 区别是一个进入，一个是出去，ChannelInBoundHandlerAdapter在下文会用到。</p> <p><img decoding="async" alt="" height="287" src="http://img.555519.xyz/uploads3/20220602/174c70e0e6426923e65aabe78e1433b6.jpg"><img decoding="async" alt="" height="287" src="http://img.555519.xyz/uploads3/20220602/e95fd7c66d7c16760335d8d40b761bf4.jpg"><img loading="lazy" decoding="async" alt="" height="478" src="http://img.555519.xyz/uploads3/20220602/99fc777b0f88481f5d66c232ad1178f8.jpg"></p> <h3><span style="color:#f33b45;">ChannelInboundHandlerAdapter</span></h3> <p>&nbsp; &nbsp; &nbsp; &nbsp; 方法一:&nbsp; &nbsp;channelActive(ChannelHandlerContext ctx);&nbsp; 在管道激活的时候初始化ChannelHandlerContext, 可用ChannelHandlerContext的wirteAndFlush()方法去向Pipeline写入数据， 实现ChannelInboundHandlerAdapter抽象类是必须重写此方法，要不然无法使用ctx去写数据。</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; 方法二:&nbsp; &nbsp;chnnelRead(ChannelHandlerContext ctx, Object msg);&nbsp; &nbsp;这个方法用来读取pipeline管道流过来的数据, msg为数据包。</p> <h3>&nbsp; &nbsp; &nbsp;ChannelOutBoundHandlerAdapter</h3> <p>&nbsp; &nbsp; &nbsp; &nbsp;主要方法:</p> <p>&nbsp; &nbsp; &nbsp; &nbsp; 方法一:&nbsp; bind(ChannelHandlerContext ctx, SocketAddress socketAddress, ChannelPromise channelPromise);&nbsp; &nbsp;绑定IP， 监听端口。</p> <p>&nbsp;另外他们都实现了Callable接口， 此接口里只有一个方法call() , 因此我们可以在线程执行时，将客户端发送消息的逻辑放到call()方法里。</p> <pre><code class="language-java">package com.example.dubbo.protocol.dubbo;  import com.example.dubbo.framework.Invocation; import com.example.dubbo.framework.URL; import com.example.dubbo.protocol.http.HttpClient; import io.netty.bootstrap.Bootstrap; import io.netty.channel.ChannelInitializer; import io.netty.channel.ChannelOption; import io.netty.channel.ChannelPipeline; import io.netty.channel.nio.NioEventLoopGroup; import io.netty.channel.socket.SocketChannel; import io.netty.channel.socket.nio.NioServerSocketChannel; import io.netty.channel.socket.nio.NioSocketChannel; import io.netty.handler.codec.serialization.ClassResolvers; import io.netty.handler.codec.serialization.ObjectDecoder; import io.netty.handler.codec.serialization.ObjectEncoder;  import java.util.concurrent.ExecutionException; import java.util.concurrent.ExecutorService; import java.util.concurrent.Executors;  public class NettyClient {      public NettyClientHandler client = null;      private URL url;      // 使用线程池开启线程     private static ExecutorService executorService = Executors.newCachedThreadPool();      public NettyClientHandler start() {         client = new NettyClientHandler();          final Bootstrap bootstrap = new Bootstrap();          bootstrap.group(new NioEventLoopGroup())                 .channel(NioSocketChannel.class)                 .option(ChannelOption.TCP_NODELAY, true)                 .handler(new ChannelInitializer&lt;SocketChannel&gt;() {                     @Override                     protected void initChannel(SocketChannel socketChannel) throws Exception {                         ChannelPipeline pipeline = socketChannel.pipeline();                         pipeline.addLast("decoder", new ObjectDecoder(ClassResolvers.weakCachingConcurrentResolver(this.getClass().getClassLoader())));                         pipeline.addLast("encoder", new ObjectEncoder());                         pipeline.addLast("handler", client);                     }                 });          // 连接socket         try {             bootstrap.connect(url.getHost(), url.getPort()).sync();         } catch (InterruptedException e) {             e.printStackTrace();         }         return client;     }      // 通过线程来发送信息给Server     public Object send(URL url, Invocation invocation) {         this.url = url;         if (client == null) {             client = start();         }         client.setInvocation(invocation);         try {             Object obj = executorService.submit(client).get();             return obj;         } catch (InterruptedException e) {             e.printStackTrace();         } catch (ExecutionException e) {             e.printStackTrace();         }         return null;     }      public static void main(String[] args) {         //测试nettyClient往nettyServer发送message         Invocation invocation = new Invocation("com.example.dubbo.provider.api.UserInterface", "sayHello", new Object[]{"bingbing"}, new Class[]{String.class});         NettyClient client = new NettyClient();         URL url = new URL("localhost", 8001);         client.send(url, invocation);     }   }</code></pre> </h1> <pre><code class="language-java"> public static void main(String[] args) {         //测试nettyClient往nettyServer发送message         Invocation invocation = new Invocation("com.example.dubbo.provider.api.UserInterface", "sayHello", new Object[]{"bingbing"}, new Class[]{String.class});         NettyClient client = new NettyClient();         URL url = new URL("localhost", 8001);         client.send(url, invocation);     }</code></pre> <p>&nbsp;&nbsp;消费方:</p> <p><img loading="lazy" decoding="async" alt="" height="382" src="http://img.555519.xyz/uploads3/20220602/24eb4cfcec8e17834e9b027b5df04d4f.jpg"></p> <p>服务方:</p> <p><img loading="lazy" decoding="async" alt="" height="390" src="http://img.555519.xyz/uploads3/20220602/fbbf31f2cf6f9a09113880dbfa861e44.jpg"></p> <h3><span style="color:#f33b45;">注:</span></h3> <p><span style="color:#f33b45;">&nbsp; &nbsp; &nbsp; &nbsp;1. 根据如上consumer控制台打印结果发现我在服务端已经将执行结果回写到了pipeline里，但消费方读取到的结果为null! 是什么原因呢?</span></p> <p>&nbsp; &nbsp; &nbsp; &nbsp; 经过一番分析后，原因是<span style="color:#f33b45;">result还没来得及被赋值就给返回出去了</span>。发现是因为在执行call()方法时，当前线程没有等待result赋值后就返回了, 所以返回的result为null。</p> <p><strong>解决方法</strong></p> <p>&nbsp; &nbsp; &nbsp; &nbsp;在发送消息后，用wait()阻塞一下，等待ChannelRead()读取到服务端发送过来的数据赋值给Result, 然后再返回result。</p> <pre><code class="language-java">     @Override     public Object call() throws Exception {         // 在Call 方法执行逻辑         System.out.println("向服务端发送消息...");         ctx.writeAndFlush(invocation);         wait();         return result;     }     @Override     public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {         //读取消息         this.result = msg;         notify();     }</code></pre> <p>&nbsp; &nbsp; 2. 重新启动consumer， consumer控制台报错:</p> <p><img loading="lazy" decoding="async" alt="" height="279" src="http://img.555519.xyz/uploads3/20220602/a8b30998dfa1070d35ee98a0551675df.jpg"></p> <p>查阅官网相关资料后，发现出现此错误的原因主要包含了以下几种情况:</p> <blockquote> <p>当前线程不含有对象锁资源的时候去调用了wait()方法。</p> <p>当前线程不含有对象锁资源的时候去调用了notify()方法。</p> <p>当前线程不含有对象锁资源的时候去调用了notifyAll()方法。</p> </blockquote> <p><span style="color:#f33b45;">&nbsp; &nbsp; &nbsp; 2.&nbsp; 在高并发情况下，如果有2个线程同时进入到call()方法里，会不会出现上述的报错问题?</span></p> <p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 答案是肯定的，有可能会存在如下情况,上一个线程拿到对象资源锁执行wait()，但它还没执行完，下一个线程就又进入到call()方法去拿wait()，没有拿到资源锁就wait(), 所以报错。</p> <h3>解决方法</h3> <p>&nbsp; &nbsp; &nbsp; &nbsp; 加锁，在call()方法和channelRead()方法上添加synchronized关键字。</p> <p><img loading="lazy" decoding="async" alt="" height="749" src="http://img.555519.xyz/uploads3/20220602/0a41c1261f16e6b41e1dcc87b5f0e634.jpg"></p> <p>重写启动后，观察结果！</p> <p><img loading="lazy" decoding="async" alt="" height="353" src="http://img.555519.xyz/uploads3/20220602/fdfe41affa6165fbaf285b6cb95ba6f0.jpg"></p> <p>程序调通了后，就可以把netty客户端和服务端整合到之前的项目里。</p> </h1> <p>&nbsp; &nbsp; &nbsp;consumer:</p> <p><img loading="lazy" decoding="async" alt="" height="706" src="http://img.555519.xyz/uploads3/20220602/55325b416b11550c87ff5654024db963.jpg"></p> <p>provider:</p> <p>&nbsp; &nbsp; &nbsp;启动nettyServer</p> <p><img loading="lazy" decoding="async" alt="" height="495" src="http://img.555519.xyz/uploads3/20220602/9ea085a3dac49259c250c917942b6112.jpg"></p> <p>&nbsp;重新启动观察结果:</p> <p><img loading="lazy" decoding="async" alt="" height="397" src="http://img.555519.xyz/uploads3/20220602/bc17dad6e797e43717b732eae8127b06.jpg"></p> <p>借助Netty实现远程调用成功，至此，整合Netty完毕！</p> </h1> <p>&nbsp; &nbsp; &nbsp; &nbsp; 稳定运行一段时间后，发现开始出现问题了，问题如下:</p> <blockquote> <p>&nbsp; &nbsp;Exception in thread "main" java.lang.IllegalStateException: failed to create a child event loop<br /> &nbsp;&nbsp; &nbsp;at io.netty.util.concurrent.MultithreadEventExecutorGroup.&lt;init&gt;(MultithreadEventExecutorGroup.java:68)<br /> &nbsp;&nbsp; &nbsp;at io.netty.channel.MultithreadEventLoopGroup.&lt;init&gt;(MultithreadEventLoopGroup.java:49)<br /> &nbsp;&nbsp; &nbsp;at io.netty.channel.nio.NioEventLoopGroup.&lt;init&gt;(NioEventLoopGroup.java:61)<br /> &nbsp;&nbsp; &nbsp;at io.netty.channel.nio.NioEventLoopGroup.&lt;init&gt;(NioEventLoopGroup.java:52)<br /> &nbsp;&nbsp; &nbsp;at io.netty.channel.nio.NioEventLoopGroup.&lt;init&gt;(NioEventLoopGroup.java:44)<br /> &nbsp;&nbsp; &nbsp;at io.netty.channel.nio.NioEventLoopGroup.&lt;init&gt;(NioEventLoopGroup.java:36)<br /> &nbsp;&nbsp; &nbsp;at com.example.dubbo.protocol.dubbo.NettyClient.start(NettyClient.java:36)<br /> &nbsp;&nbsp; &nbsp;at com.example.dubbo.protocol.dubbo.NettyClient.send(NettyClient.java:62)<br /> &nbsp;&nbsp; &nbsp;at com.example.dubbo.framework.ProxyFactory$1.invoke(ProxyFactory.java:40)<br /> &nbsp;&nbsp; &nbsp;at org.springframework.cglib.proxy.Proxy$ProxyImpl$$EnhancerByCGLIB$$2c24aae9.sayHello(&lt;generated&gt;)<br /> &nbsp;&nbsp; &nbsp;at com.example.dubbo.consumer.ConsumerApplication.main(ConsumerApplication.java:25)<br /> Caused by: io.netty.channel.ChannelException: failed to open a new selector<br /> &nbsp;&nbsp; &nbsp;at io.netty.channel.nio.NioEventLoop.openSelector(NioEventLoop.java:128)<br /> &nbsp;&nbsp; &nbsp;at io.netty.channel.nio.NioEventLoop.&lt;init&gt;(NioEventLoop.java:120)<br /> &nbsp;&nbsp; &nbsp;at io.netty.channel.nio.NioEventLoopGroup.newChild(NioEventLoopGroup.java:87)<br /> &nbsp;&nbsp; &nbsp;at io.netty.util.concurrent.MultithreadEventExecutorGroup.&lt;init&gt;(MultithreadEventExecutorGroup.java:64)<br /> &nbsp;&nbsp; &nbsp;... 10 more<br /> Caused by: java.io.IOException: Unable to establish loopback connection<br /> &nbsp;&nbsp; &nbsp;at sun.nio.ch.PipeImpl$Initializer.run(PipeImpl.java:94)<br /> &nbsp;&nbsp; &nbsp;at sun.nio.ch.PipeImpl$Initializer.run(PipeImpl.java:61)<br /> &nbsp;&nbsp; &nbsp;at java.security.AccessController.doPrivileged(Native Method)<br /> &nbsp;&nbsp; &nbsp;at sun.nio.ch.PipeImpl.&lt;init&gt;(PipeImpl.java:171)<br /> &nbsp;&nbsp; &nbsp;at sun.nio.ch.SelectorProviderImpl.openPipe(SelectorProviderImpl.java:50)<br /> &nbsp;&nbsp; &nbsp;at java.nio.channels.Pipe.open(Pipe.java:155)<br /> &nbsp;&nbsp; &nbsp;at sun.nio.ch.WindowsSelectorImpl.&lt;init&gt;(WindowsSelectorImpl.java:127)<br /> &nbsp;&nbsp; &nbsp;at sun.nio.ch.WindowsSelectorProvider.openSelector(WindowsSelectorProvider.java:44)<br /> &nbsp;&nbsp; &nbsp;at io.netty.channel.nio.NioEventLoop.openSelector(NioEventLoop.java:126)<br /> &nbsp;&nbsp; &nbsp;... 13 more<br /> Caused by: java.net.SocketException: No buffer space available (maximum connections reached?): connect<br /> &nbsp;&nbsp; &nbsp;at sun.nio.ch.Net.connect0(Native Method)<br /> &nbsp;&nbsp; &nbsp;at sun.nio.ch.Net.connect(Net.java:454)<br /> &nbsp;&nbsp; &nbsp;at sun.nio.ch.Net.connect(Net.java:446)<br /> &nbsp;&nbsp; &nbsp;at sun.nio.ch.SocketChannelImpl.connect(SocketChannelImpl.java:648)<br /> &nbsp;&nbsp; &nbsp;at java.nio.channels.SocketChannel.open(SocketChannel.java:189)<br /> &nbsp;&nbsp; &nbsp;at sun.nio.ch.PipeImpl$Initializer$LoopbackConnector.run(PipeImpl.java:127)<br /> &nbsp;&nbsp; &nbsp;at sun.nio.ch.PipeImpl$Initializer.run(PipeImpl.java:76)<br /> &nbsp;&nbsp; &nbsp;... 21 more</p> </blockquote> <p><img loading="lazy" decoding="async" alt="" height="633" src="http://img.555519.xyz/uploads3/20220602/5ba8ae04867706a284dc9a30470b6654.jpg"><br /> 发现最终的问题是由于<span style="color:#f33b45;">no buffer space available (maximum connections reached?): connect</span></p> <p>用netstat -ano 命令查看连接情况, 发现有大量的9090端口的连接没有被释放。</p> <p><img loading="lazy" decoding="async" alt="" height="1039" src="http://img.555519.xyz/uploads3/20220602/60c12644857aa929ea0b6826c1878fd2.jpg"></p> <p>发现是生成了大量的TCP连接。</p> <p>使用jvisualvm查看内存使用情况, 发现内存几乎用满。</p> <p><img loading="lazy" decoding="async" alt="" height="1039" src="http://img.555519.xyz/uploads3/20220602/efbe9903d7fcec60619ab79a871f777b.jpg"></p> <p>在资源有限的情况下CashedThreadPool 有可能会创建大量的线程来不及回收，默认回收时间是60s, 最终导致OOM。</p> <p>可以通过Semaphore 进行加锁，相当于限流的作用。</p> <p>源代码:<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://gitee.com/bingbing-123456/dubbo-rpc.git"  title="dubbo-rpc: 手写dubbo仓库源码" rel="nofollow">dubbo-rpc: 手写dubbo仓库源码</a></p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-74738.htm">幼猫睡觉要人陪（小猫睡觉要人陪吗）</a></p>
                                        <p>下一个：<a href="/news/article-75406.htm">为啥家猫不需要打疫苗宠物猫要打（宠物猫为什么不建议打狂犬疫苗）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-73382.htm" title="vue+eslint+prettier格式化">vue+eslint+prettier格式化</a></li>
                        <li class="py-2"><a href="/news/article-72720.htm" title="让猫挠了用打狂犬育苗吗有事吗（让猫挠了没事吧）">让猫挠了用打狂犬育苗吗有事吗（让猫挠了没事吧）</a></li>
                        <li class="py-2"><a href="/news/article-76072.htm" title="宠物粮市场前景分析（宠物粮食市场前景）">宠物粮市场前景分析（宠物粮食市场前景）</a></li>
                        <li class="py-2"><a href="/news/article-66140.htm" title="北京爱康宠物医院官网（爱康宠物诊所怎么样）">北京爱康宠物医院官网（爱康宠物诊所怎么样）</a></li>
                        <li class="py-2"><a href="/news/article-71402.htm" title="动物医院有哪些功能区（动物医院有哪些功能区）">动物医院有哪些功能区（动物医院有哪些功能区）</a></li>
                        <li class="py-2"><a href="/news/article-74738.htm" title="幼猫睡觉要人陪（小猫睡觉要人陪吗）">幼猫睡觉要人陪（小猫睡觉要人陪吗）</a></li>
                        <li class="py-2"><a href="/news/article-73383.htm" title="猫咪打三支疫苗多少钱（给猫打三针疫苗多少钱）">猫咪打三支疫苗多少钱（给猫打三针疫苗多少钱）</a></li>
                        <li class="py-2"><a href="/news/article-68152.htm" title="宠物美容学校正规学费多少钱内蒙古包头哪有美容狗学校（内蒙古宠物美容培训）">宠物美容学校正规学费多少钱内蒙古包头哪有美容狗学校（内蒙古宠物美容培训）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-7-clash-v2ray-ss-ssr.htm" title="VPN Host | 3月7日20.3M/S|免费SSR/Shadowrocket/Clash/V2ray免费节点订阅分享">VPN Host | 3月7日20.3M/S|免费SSR/Shadowrocket/Clash/V2ray免费节点订阅分享</a></li>
                        <li class="py-2"><a href="/news/article-76750.htm" title="免费领养狗狗正规网站平台下载大全 免费领养狗狗正规网站平台下载大全视频">免费领养狗狗正规网站平台下载大全 免费领养狗狗正规网站平台下载大全视频</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">53</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                    </ul>
    </div>
</div>



                    </div>
                </div>
            
            </div>
        </div>
    </section>
    
        <section class="w3l-footer-29-main w3l-copyright">
        <div class="container">
            <div class="row bottom-copies">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                <p class="col-lg-8 copy-footer-29">
                    VPN Host 节点机场订阅中文站 版权所有
                    <br />
                    Powered by WordPress
                </p>
                <div class="col-lg-4 main-social-footer-29">
                    <a href="#facebook" class="facebook"><span class="fa fa-facebook"></span></a>
                    <a href="#twitter" class="twitter"><span class="fa fa-twitter"></span></a>
                    <a href="#instagram" class="instagram"><span class="fa fa-instagram"></span></a>
                    <a href="#linkedin" class="linkedin"><span class="fa fa-linkedin"></span></a>
                </div>
            </div>
        </div>
    </section>
    <!-- move top -->
    <button onclick="topFunction()" id="movetop" title="Go to top">
        <span class="fa fa-long-arrow-up"></span>
    </button>
    <script>
    // When the user scrolls down 20px from the top of the document, show the button
    window.onscroll = function() {
        scrollFunction()
    };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("movetop").style.display = "block";
        } else {
            document.getElementById("movetop").style.display = "none";
        }
    }

    // When the user clicks on the button, scroll to the top of the document
    function topFunction() {
        document.body.scrollTop = 0;
        document.documentElement.scrollTop = 0;
    }
    </script>
    <!-- /move top -->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>